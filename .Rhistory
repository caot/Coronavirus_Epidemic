rm(forecast2.df)
# save everything to RData file
save.image("CoronaV.RData")
csv_file = "actual-vs-predict.csv"
full_path = paste(data_path, csv_file, sep="")
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat1[,"date"] = as.Date(dat1[,"date"], format="%Y-%m-%d")
dat1
fnm = "/actual-vs-predict.png"
full_path = paste(home, fnm, sep="")
full_path
png(full_path, width=680, height=480)
par(mar = c(5,5,5,5))
with(dat1, plot(date, delta, type="b", col="black", pch=16, cex=2, xaxt="n",
xlab="Date", ylab="Delta", ylim=c(-1700,0)))
title(main="Fig. 1 Actual Infected Cases minus Model Prediction")
mtext(text="negative ==> actual less than prediction", side=3, line=1)
axis(1, dat1$date, format(dat1$date, "%b %d"), cex.axis=1 )
par(new = T)
with(dat1, plot(date, delta_pct, type="b", col="red3", pch=1,
axes=F, xlab=NA, ylab=NA, cex=2, ylim=c(-16,0)))
axis(side = 4)
mtext(side = 4, line = 3, 'percentage')
legend("topleft",
legend=c("Delta", "percent"),
lty=c(1,1), pch=c(16, 1), col=c("black", "red3"))
dev.off()
png(full_path, width=680, height=480)
par(mar = c(5,5,5,5))
with(dat1, plot(date, delta, type="b", col="black", pch=16, cex=2, xaxt="n",
xlab="Date", ylab="Delta", ylim=c(-1800,0)))
title(main="Fig. 1 Actual Infected Cases minus Model Prediction")
mtext(text="negative ==> actual less than prediction", side=3, line=1)
axis(1, dat1$date, format(dat1$date, "%b %d"), cex.axis=1 )
par(new = T)
with(dat1, plot(date, delta_pct, type="b", col="red3", pch=1,
axes=F, xlab=NA, ylab=NA, cex=2, ylim=c(-16,0)))
axis(side = 4)
mtext(side = 4, line = 3, 'percentage')
legend("topleft",
legend=c("Delta", "percent"),
lty=c(1,1), pch=c(16, 1), col=c("black", "red3"))
dev.off()
dat1
sapply(dat1, class)
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
full_path
csv_file = "actual-vs-predict.csv"
full_path = paste(data_path, csv_file, sep="")
full_path
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat1[,"date"] = as.Date(dat1[,"date"], format="%Y-%m-%d")
dat1
fnm = "/actual-vs-predict.png"
full_path = paste(home, fnm, sep="")
png(full_path, width=680, height=480)
par(mar = c(5,5,5,5))
with(dat1, plot(date, delta, type="b", col="black", pch=16, cex=2, xaxt="n",
xlab="Date", ylab="Delta", ylim=c(-1800,0)))
title(main="Fig. 1 Actual Infected Cases minus Model Prediction")
mtext(text="negative ==> actual less than prediction", side=3, line=1)
axis(1, dat1$date, format(dat1$date, "%b %d"), cex.axis=1 )
par(new = T)
with(dat1, plot(date, delta_pct, type="b", col="red3", pch=1,
axes=F, xlab=NA, ylab=NA, cex=2, ylim=c(-16,0)))
axis(side = 4)
mtext(side = 4, line = 3, 'percentage')
legend("topleft",
legend=c("Delta", "percent"),
lty=c(1,1), pch=c(16, 1), col=c("black", "red3"))
dev.off()
getwd()
if ( file.exists("CoronaV.RData") ) load("CoronaV.RData")
rm(data_path, plot_path, csv_file, dat, model, last.t, latest.date)
ls()
Daily_updates
forecast.df
Forecast
today = Sys.Date()
today.ch = as.character(today)
home = getwd()
data_path = paste(home,  "/data/", sep="")
plot_path = paste(home,  "/plots/", sep="")
csv_file = "actual-vs-predict.csv"
full_path = paste(data_path, csv_file, sep="")
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat1[,"date"] = as.Date(dat1[,"date"], format="%Y-%m-%d")
dat1
fnm = "/actual-vs-predict.png"
full_path = paste(home, fnm, sep="")
png(full_path, width=680, height=480)
par(mar = c(5,5,5,5))
with(dat1, plot(date, delta, type="b", col="black", pch=16, cex=2, xaxt="n",
xlab="Date", ylab="Delta", ylim=c(-1800,0)))
title(main="Fig. 1 Actual Infected Cases minus Model Prediction")
mtext(text="negative ==> actual less than prediction", side=3, line=1)
axis(1, dat1$date, format(dat1$date, "%b %d"), cex.axis=1 )
par(new = T)
with(dat1, plot(date, delta_pct, type="b", col="red3", pch=1,
axes=F, xlab=NA, ylab=NA, cex=2, ylim=c(-16,0)))
axis(side = 4)
mtext(side = 4, line = 3, 'percentage')
legend("topleft",
legend=c("Delta", "percent"),
lty=c(1,1), pch=c(16, 1), col=c("black", "red3"))
dev.off()
Model_param
today = Sys.Date()
today.ch = as.character(today)
if ( file.exists("CoronaV.RData") ) load("CoronaV.RData")
ls()
df
latest.date
fnm = paste("daily-prediction-", latest.date, ".png",  sep="")
full_path = paste(plot_path, fnm, sep="")
full_path
png(full_path)
plot(df[,"t"], df[,"confirmed"], type="b",
xlab="Date", ylab="No of confirmed cases",
main="Fig. 2 Actual and Predictions")
abline(v=last.t, col="grey", lwd=2)
grid(NA, 10, lwd = 2)
text(x=last.t, y=100, labels=latest.date, pos=3, col="blue", cex=1)
txt = c(paste(as.character(forecast.df[1,"date"]), round(forecast.df[1,"confirmed"],0), sep=" : "),
paste(as.character(forecast.df[2,"date"]), round(forecast.df[2,"confirmed"],0), sep=" : "))
hgt = max(df[,"confirmed"])
text(x=1, y=c(hgt*0.9, hgt*0.8), labels=txt, pos=4, col="red", cex=2)
text(x=last.t+0.2, y=15000, labels="Forecast", pos=4, col="red4", cex=1)
text(x=last.t-1, y=15000, labels="Actual", pos=2, col="red4", cex=1)
dev.off()
dat2
forecast2.df
df2
fnm = paste("daily-linear-prediction-", latest.date, ".png",  sep="")
fnm
full_path = paste(plot_path, fnm, sep="")
full_path
png(full_path)
plot(df2[,"t"], df2[,"confirmed"], type="b",
xlab="Date", ylab="No of confirmed cases",
main="Fig. 4 Actual and Predictions (linear model)")
abline(v=last.t, col="grey", lwd=2)
grid(NA, 10, lwd = 2)
text(x=last.t, y=100, labels=latest.date, pos=3, col="blue", cex=1)
txt = c(paste(as.character(forecast2.df[1,"date"]), round(forecast2.df[1,"confirmed"],0), sep=" : "),
paste(as.character(forecast2.df[2,"date"]), round(forecast2.df[2,"confirmed"],0), sep=" : "))
hgt = max(df2[,"confirmed"])
text(x=min(df2[,"t"]), y=c(hgt*0.9, hgt*0.8), labels=txt, pos=4, col="red", cex=2)
text(x=last.t+0.2, y=15000, labels="Forecast", pos=4, col="red4", cex=1)
text(x=last.t-1, y=15000, labels="Actual", pos=2, col="red4", cex=1)
dev.off()
if ( file.exists("CoronaV.RData") ) load("CoronaV.RData")
Model_param
install.packages("shinystan")
library(rstan)
source('common/R/plots.R')
source('/mnt/WanChai/Dropbox/AlgoTrading/GIT/gsoc17-hhmm/common/R/plots.R')
source('/mnt/WanChai/Dropbox/AlgoTrading/GIT/gsoc17-hhmm/hhmm/R/hhmm-sim.R')
library(ref)
install.packages(pkgs="ref", repos=NULL)
?install.packages
install.packages(pkgs="/mnt/WanChai/Dropbox/AlgoTrading/GIT/gsoc17-hhmm/ref_0.99.tar.gz", repos=NULL)
source('/mnt/WanChai/Dropbox/AlgoTrading/GIT/gsoc17-hhmm/hhmm/R/hhmm-sim.R')
source('/mnt/WanChai/Dropbox/AlgoTrading/GIT/gsoc17-hhmm/common/R/plots.R')
source('/mnt/WanChai/Dropbox/AlgoTrading/GIT/gsoc17-hhmm/hhmm/R/hhmm-sim.R')
# Set up! -----------------------------------------------------------------
T.length = 200
n.iter = 500
n.warmup = 250
n.chains = 1
n.cores = 1
n.thin = 1
n.seed = 9000
# 2x2-component Gaussian Mixture ------------------------------------------
r   <- root_node(
pi_d     = c(0.35, 0.65, 0),
A_d      = matrix(c(0.0, 0.0, 1.0,
0.0, 0.0, 1.0,
0.0, 0.0, 1.0),
nrow = 3, ncol = 3,
byrow = TRUE))
# Component 1
q21 <- internal_node(
d = 2, i = 1,
pi_d     = c(0.5, 0.5, 0),
A_d      = matrix(c(0.0, 0.0, 1.0,
0.0, 0.0, 1.0,
0.0, 0.0, 1.0),
nrow = 3, ncol = 3,
byrow = TRUE))
q31 <- production_node(
d = 3, i = 1,
obs.mod  = obsmodel_gaussian,
obs.par  = list(mu = -50, sigma = 1))
q32 <- production_node(
d = 3, i = 2,
obs.mod  = obsmodel_gaussian,
obs.par  = list(mu = -25, sigma = 1))
q3e <- end_node(
d = 3, i = 3)
# Component 2
q22 <- internal_node(
d = 2, i = 2,
pi_d     = c(0.8, 0.2, 0),
A_d      = matrix(c(0.0, 0.0, 1.0,
0.0, 0.0, 1.0,
0.0, 0.0, 1.0),
nrow = 3, ncol = 3,
byrow = TRUE))
q41 <- production_node(
d = 3, i = 1,
obs.mod  = obsmodel_gaussian,
obs.par  = list(mu = 50, sigma = 1))
q42 <- production_node(
d = 3, i = 2,
obs.mod  = obsmodel_gaussian,
obs.par  = list(mu = 25, sigma = 1))
q4e <- end_node(
d = 3, i = 3)
# Component 1, 2 end
q2e <- end_node(
d = 2, i = 3)
set_children(r, list(as.ref(q21), as.ref(q22), as.ref(q2e)))
set_parent(q21, as.ref(r))
set_children(q21, list(as.ref(q31), as.ref(q32), as.ref(q3e)))
set_parent(q22, as.ref(r))
set_children(q22, list(as.ref(q41), as.ref(q42), as.ref(q4e)))
set_parent(q2e, as.ref(r))
set_parent(q31, as.ref(q21))
set_parent(q32, as.ref(q21))
set_parent(q3e, as.ref(q21))
set_parent(q41, as.ref(q22))
set_parent(q42, as.ref(q22))
set_parent(q4e, as.ref(q22))
# Check no orphans
for (i in 1:length(ls())) {
l <- get(ls()[[i]])
if ("node" %in% class(l)) {
if (is.null(get_parent(l)))
print(paste(ls()[[i]], "has no parent"))
if (is.null(has_children(l)))
print(paste(ls()[[i]], "has no children"))
}
}
# Simulate ----------------------------------------------------------------
set.seed(n.seed)
options(expressions = 1e4)
x_t    <- do.call(c, lapply(1:(T.length / 100), function(i) {activate(r, T.length = 100)}))
K      <- sum(sapply(ls(), function(l){"hhmm_pnode" %in% class(get(l))}))
l1K    <- length(get_children(r)) - 1
z.true <- kmeans(scale(x_t, TRUE, TRUE), K, nstart = 10)$cluster
X11()
par(mfrow = c(1, K + 1))
hist(x_t, breaks = "FD",
main = bquote("Unlabeled data"),
xlab = bquote(x[t]),
col = 'lightgray')
for (i in 1:K)
hist(x_t[z.true == i], breaks = "FD",
main = bquote("True state" ~ .(i)),
xlab = bquote(x[t]),
col  = i)
# Semisupervised model estimation -----------------------------------------
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan.model = '/mnt/WanChai/Dropbox/AlgoTrading/GIT/gsoc17-hhmm/hhmm/stan/hhmm-semisup.stan'
stan.data = list(
T = T.length,
K = K,
x_t = x_t,
l1K = l1K,
l1z_t = ifelse(x_t >= 0, 1, 2),
l1index = matrix(c(1, 2, 3, 4),
nrow = l1K, ncol = 2,
byrow = TRUE))
# Chains are initialized close to k-means to speed up convergence
init_fun <- function(stan.data) {
ret <- matrix(0, nrow = stan.data$K, ncol = 2)
for (l in 1:stan.data$l1K) {
cl <- kmeans(scale(stan.data$x_t[stan.data$l1z_t == l], TRUE, TRUE),
stan.data$l1index[l, 2] - stan.data$l1index[l, 1] + 1,
nstart = 10)$cluster
ret[stan.data$l1index[l, 1]:stan.data$l1index[l, 2], 1] <-
as.vector(by(stan.data$x_t[stan.data$l1z_t == l], cl, mean))
ret[stan.data$l1index[l, 1]:stan.data$l1index[l, 2], 2] <-
as.vector(by(stan.data$x_t[stan.data$l1z_t == l], cl, sd))
}
list(
mu_k = as.vector(ret[, 1]),
sigma_k = as.vector(ret[, 2])
)
}
stan.fit <- stan(file = stan.model,
model_name = stan.model,
data = stan.data, verbose = T,
iter = n.iter, warmup = n.warmup,
thin = n.thin, chains = n.chains,
# init = function() {init_fun(stan.data)}, # optional!
cores = n.cores, seed = n.seed)
stan.model = '/mnt/WanChai/Dropbox/AlgoTrading/GIT/gsoc17-hhmm/hhmm/hhmm-semisup.stan'
stan.data = list(
T = T.length,
K = K,
x_t = x_t,
l1K = l1K,
l1z_t = ifelse(x_t >= 0, 1, 2),
l1index = matrix(c(1, 2, 3, 4),
nrow = l1K, ncol = 2,
byrow = TRUE))
# Chains are initialized close to k-means to speed up convergence
init_fun <- function(stan.data) {
ret <- matrix(0, nrow = stan.data$K, ncol = 2)
for (l in 1:stan.data$l1K) {
cl <- kmeans(scale(stan.data$x_t[stan.data$l1z_t == l], TRUE, TRUE),
stan.data$l1index[l, 2] - stan.data$l1index[l, 1] + 1,
nstart = 10)$cluster
ret[stan.data$l1index[l, 1]:stan.data$l1index[l, 2], 1] <-
as.vector(by(stan.data$x_t[stan.data$l1z_t == l], cl, mean))
ret[stan.data$l1index[l, 1]:stan.data$l1index[l, 2], 2] <-
as.vector(by(stan.data$x_t[stan.data$l1z_t == l], cl, sd))
}
list(
mu_k = as.vector(ret[, 1]),
sigma_k = as.vector(ret[, 2])
)
}
stan.fit <- stan(file = stan.model,
model_name = stan.model,
data = stan.data, verbose = T,
iter = n.iter, warmup = n.warmup,
thin = n.thin, chains = n.chains,
# init = function() {init_fun(stan.data)}, # optional!
cores = n.cores, seed = n.seed)
?stan
source('/mnt/WanChai/Dropbox/AlgoTrading/GIT/gsoc17-hhmm/hhmm/R/hhmm-sim.R')
library(highfrequency)
library(moments)
library(digest)
today = Sys.Date()
today.ch = as.character(today)
if ( file.exists("CoronaV.RData") ) load("CoronaV.RData")
ls()
rm(data_path, plot_path, csv_file, dat, model, last.t, latest.date)
home = getwd()
cat("home : ", home)
data_path = paste(home,  "/data/", sep="")
plot_path = paste(home,  "/plots/", sep="")
csv_file = "corona_data.csv"
full_path = paste(data_path, csv_file, sep="")
cat("csv full path : ", full_path)
# override dat with the latest data
dat = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat = dat[9:nrow(dat),]
dat[,"t"] = 1:nrow(dat)
dat[,"date"] = as.Date(dat[,"date"], format="%Y-%m-%d")
cat("====== Data ============================ \n")
dat
home = getwd()
home
data_path = paste(home,  "/data/", sep="")
plot_path = paste(home,  "/plots/", sep="")
csv_file = "actual-vs-predict.csv"
full_path = paste(data_path, csv_file, sep="")
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat1[,"date"] = as.Date(dat1[,"date"], format="%Y-%m-%d")
dat1
fnm = "/actual-vs-predict.png"
full_path = paste(home, fnm, sep="")
png(full_path, width=680, height=480)
par(mar = c(5,5,5,5))
with(dat1, plot(date, delta, type="b", col="black", pch=16, cex=2, xaxt="n",
xlab="Date", ylab="Delta", ylim=c(-1800,0)))
title(main="Fig. 1 Actual Infected Cases minus Model Prediction")
mtext(text="negative ==> actual less than prediction", side=3, line=1)
axis(1, dat1$date, format(dat1$date, "%b %d"), cex.axis=1 )
par(new = T)
with(dat1, plot(date, delta_pct, type="b", col="red3", pch=1,
axes=F, xlab=NA, ylab=NA, cex=2, ylim=c(-16,0)))
axis(side = 4)
mtext(side = 4, line = 3, 'percentage')
legend("topleft",
legend=c("Delta", "percent"),
lty=c(1,1), pch=c(16, 1), col=c("black", "red3"))
dev.off()
fnm = "/actual-vs-predict.png"
full_path = paste(home, fnm, sep="")
png(full_path, width=680, height=480)
par(mar = c(5,5,5,5))
with(dat1, plot(date, delta, type="b", col="black", pch=16, cex=2, xaxt="n",
xlab="Date", ylab="Delta", ylim=c(-2200,0)))
title(main="Fig. 1 Actual Infected Cases minus Model Prediction")
mtext(text="negative ==> actual less than prediction", side=3, line=1)
axis(1, dat1$date, format(dat1$date, "%b %d"), cex.axis=1 )
par(new = T)
with(dat1, plot(date, delta_pct, type="b", col="red3", pch=1,
axes=F, xlab=NA, ylab=NA, cex=2, ylim=c(-16,0)))
axis(side = 4)
mtext(side = 4, line = 3, 'percentage')
legend("topleft",
legend=c("Delta", "percent"),
lty=c(1,1), pch=c(16, 1), col=c("black", "red3"))
dev.off()
home = getwd()
data_path = paste(home,  "/data/", sep="")
plot_path = paste(home,  "/plots/", sep="")
home
csv_file = "actual-vs-predict.csv"
full_path = paste(data_path, csv_file, sep="")
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat1[,"date"] = as.Date(dat1[,"date"], format="%Y-%m-%d")
dat1
fnm = "/actual-vs-predict.png"
full_path = paste(home, fnm, sep="")
png(full_path, width=680, height=480)
par(mar = c(5,5,5,5))
with(dat1, plot(date, delta, type="b", col="black", pch=16, cex=2, xaxt="n",
xlab="Date", ylab="Delta", ylim=c(-2200,0)))
title(main="Fig. 1 Actual Infected Cases minus Model Prediction")
mtext(text="negative ==> actual less than prediction", side=3, line=1)
axis(1, dat1$date, format(dat1$date, "%b %d"), cex.axis=1 )
par(new = T)
with(dat1, plot(date, delta_pct, type="b", col="red3", pch=1,
axes=F, xlab=NA, ylab=NA, cex=2, ylim=c(-16,0)))
axis(side = 4)
mtext(side = 4, line = 3, 'percentage')
legend("topleft",
legend=c("Delta", "percent"),
lty=c(1,1), pch=c(16, 1), col=c("black", "red3"))
dev.off()
ymin = min(dat1[,"delta"])
ymin
ymin / 1000
round(ymin / 1000, 1)
round(ymin / 1000, 0)
round((ymin / 1000)-1, 0)
round((ymin / 1000)-1, 0)*1000
delta_min = min(dat1[,"delta"])
ymin = round((delta_min/1000)-1,0)*1000
ymin
png(full_path, width=680, height=480)
par(mar = c(5,5,5,5))
with(dat1, plot(date, delta, type="b", col="black", pch=16, cex=2, xaxt="n",
xlab="Date", ylab="Delta", ylim=c(ymin,0)))
title(main="Fig. 1 Actual Infected Cases minus Model Prediction")
mtext(text="negative ==> actual less than prediction", side=3, line=1)
axis(1, dat1$date, format(dat1$date, "%b %d"), cex.axis=1 )
par(new = T)
with(dat1, plot(date, delta_pct, type="b", col="red3", pch=1,
axes=F, xlab=NA, ylab=NA, cex=2, ylim=c(-16,0)))
axis(side = 4)
mtext(side = 4, line = 3, 'percentage')
legend("topleft",
legend=c("Delta", "percent"),
lty=c(1,1), pch=c(16, 1), col=c("black", "red3"))
dev.off()
fnm = "/actual-vs-predict.png"
full_path = paste(home, fnm, sep="")
png(full_path, width=680, height=480)
par(mar = c(5,5,5,5))
with(dat1, plot(date, delta, type="b", col="black", pch=16, cex=2, xaxt="n",
xlab="Date", ylab="Delta", ylim=c(ymin,0)))
title(main="Fig. 1 Actual Infected Cases minus Model Prediction")
mtext(text="negative ==> actual less than prediction", side=3, line=1)
axis(1, dat1$date, format(dat1$date, "%b %d"), cex.axis=1 )
par(new = T)
with(dat1, plot(date, delta_pct, type="b", col="red3", pch=1,
axes=F, xlab=NA, ylab=NA, cex=2, ylim=c(-16,0)))
axis(side = 4)
mtext(side = 4, line = 3, 'percentage')
legend("topleft",
legend=c("Delta (left axis)", "percent (right axis)"),
lty=c(1,1), pch=c(16, 1), col=c("black", "red3"))
dev.off()
dat1
home = getwd()
data_path = paste(home,  "/data/", sep="")
plot_path = paste(home,  "/plots/", sep="")
csv_file = "actual-vs-predict.csv"
full_path = paste(data_path, csv_file, sep="")
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat1[,"date"] = as.Date(dat1[,"date"], format="%Y-%m-%d")
dat1
if ( file.exists("CoronaV.RData") ) load("CoronaV.RData")
ls()
rm(data_path, plot_path, csv_file, dat, model, last.t, latest.date)
length(Model_param)
forecast.df
Forecast
Forecast[5] = NULL
Forecast
Forecast[4] = NULL
ls()
Forecast2
Forecast2[5] = NULL
Forecast2[4] = NULL
Forecast2
ls()
length(Model_param)
Daily_updates
dim(Daily_updates)
Daily_updates = Daily_updates[1:11,]
Daily_updates
Forecast
ls()
dat2
rm(dat2)
ls()
rm(full_path)
# save everything to RData file
save.image("CoronaV.RData")
